{"version":3,"mappings":"+PAKMA,cAAiDA,oBAAQA,+BAKzDA,cAA+CA,oBAAQA,+BAKvDA,cAAyCA,oBAAQA,+BAKjDA,cAA+CA,oBAAQA,iDAIvDA,qBAAsBA,4DAAmCA,kBAAMA,kCAC/DA,qBAAqFA,gBAAIA,8BAAtCA,+ECblD,IAAMC,EAAb,MAAM,QAQJC,YAAoBC,EAAwBC,GAAxBC,cAAwBA,sBAF5CA,aAAe,EAGbA,KAAKC,UAAY,IAAIC,KAAY,GAAIA,eACrCF,KAAKG,SAAW,IAAID,KAAY,GAAIA,eACpCF,KAAKI,MAAQ,IAAIF,KAAY,GAAIA,eACjCF,KAAKK,SAAW,IAAIH,KAAY,GAAIA,eAEpCF,KAAKM,aAAe,IAAIJ,KAAU,CAChCD,UAAWD,KAAKC,UAChBE,SAAUH,KAAKG,SACfC,MAAOJ,KAAKI,MACZC,SAAUL,KAAKK,WAInBE,aAAaT,GACXE,KAAKQ,QAAO,EACZR,KAAKS,gBAAgBX,GAEvBY,SACEV,KAAKW,OAAOC,SAAS,CAAC,MAGhBH,gBAAgBX,GACtBE,KAAKa,eAAeC,SAAShB,GAC1BiB,UACC,KACA,IAAIf,KAAKQ,QAAO,EAChB,IAAMR,KAAKW,OAAOC,SAAS,CAAC,4DAnCvBI,GAAiBrB,iDAAjBqB,EAAiBC,syBDZ9BtB,eACEA,gBAAmBA,oBAAQA,QAC3BA,kBAAoDA,mCAAYI,uCAC9DJ,iBACEA,mBAAuBA,uBAAWA,QAClCA,sBACAA,mBACFA,QACAA,iBACEA,oBAAsBA,uBAAUA,QAChCA,uBACAA,oBACFA,QACAA,kBACEA,oBAAmBA,mBAAMA,QACzBA,uBACAA,oBACFA,QACAA,kBACEA,qBAAsBA,sBAASA,QAC/BA,uBACAA,qBACFA,QACAA,mBACEA,4BACAA,4BACAA,kCACFA,QACFA,QACFA,eA3B2BA,2CACCA,6EAEjBA,8DAGiBA,2EAEjBA,4DAGiBA,qEAEjBA,sDAGiBA,2EAEjBA,4DAIqCA,iCACNA,iCAChBA,uqCCdbqB,GAAb,yBCPMrB,cAAmFA,oBAAQA,+BAK3FA,cAAyFA,oBAAQA,8CCFhG,IAAMuB,EAAb,MAAM,QAGJrB,YAAoBC,EAAuBC,GAAvBC,cAAuBA,sBAF3CA,iBAAkB,GAIlBmB,OAAOrB,GACLE,KAAKa,eAAeM,OAAOrB,GACxBiB,UACC,KACChB,IAASqB,QAAQC,MAAMtB,EAAK,UAC7B,IAAMC,KAAKW,OAAOC,SAAS,CAAC,cAIlCF,SACEV,KAAKW,OAAOC,SAAS,CAAC,oDAfbI,GAAerB,iDAAfqB,EAAeC,olBDR5BtB,eACEA,gBAAmBA,mBAAOA,QAC1BA,oBAA2BA,6DAAYI,oBACrCJ,iBACEA,mBAAmBA,kBAAMA,QACzBA,sBACAA,mBAAOA,iEAAPA,QACFA,QACAA,kBACEA,oBAAsBA,sBAASA,QAC/BA,uBACAA,oBAAOA,oEAAPA,QACFA,QACAA,kBACEA,sBAAsBA,gCAASI,aAAUJ,mBAAMA,QAC/CA,sBAAmEA,oBAAOA,QAC5EA,QACFA,QACFA,iCAf4BA,kJAEjBA,oIACEA,8CAEeA,8JAEjBA,gJACEA,iDAI4BA,6rCCP5BqB,GAAb,GCcaM,EAAb,MAAM,sDAAON,6DAFA,GAAEO,SAXJ,CACPrB,KACAA,KACAsB,IACAC,cAAsB,CACpB,CAAEC,KAAM,WAAYC,UAAW/B,GAC/B,CAAE8B,KAAM,UAAWC,UAAWT,SAOvBF,GAAb","names":["n","O","constructor","o","t","this","firstName","r","lastName","email","password","registerForm","registerUser","saving","saveAndRedirect","cancel","router","navigate","userRepository","saveUser","subscribe","e","selectors","w","signIn","console","error","q","imports","_","d","path","component"],"sources":["webpack:///src/app/users/register.component.html","webpack:///src/app/users/register.component.ts","webpack:///src/app/users/sign-in.component.html","webpack:///src/app/users/sign-in.component.ts","webpack:///src/app/users/users.module.ts"],"sourcesContent":["<div>\r\n  <h2 class=\"header\">Register</h2>\r\n  <form autocomplete=\"off\" [formGroup]=\"registerForm\" (ngSubmit)=\"registerUser(registerForm.value)\">\r\n    <div class=\"form-group\" [ngClass]=\"{ 'error' : firstName.invalid && firstName.dirty }\">\r\n      <label for=\"firstName\">First Name:</label>\r\n      <em *ngIf=\"firstName.invalid && firstName.dirty\">Required</em>\r\n      <input formControlName=\"firstName\" id=\"firstName\" type=\"text\" placeholder=\"First Name...\" />\r\n    </div>\r\n    <div class=\"form-group\" [ngClass]=\"{ 'error' : lastName.invalid && lastName.dirty }\">\r\n      <label for=\"lastName\">Last Name:</label>\r\n      <em *ngIf=\"lastName.invalid && lastName.dirty\">Required</em>\r\n      <input formControlName=\"lastName\" id=\"lastName\" type=\"text\" placeholder=\"Last Name...\" />\r\n    </div>\r\n    <div class=\"form-group\" [ngClass]=\"{ 'error' : email.invalid && email.dirty }\">\r\n      <label for=\"email\">Email:</label>\r\n      <em *ngIf=\"email.invalid && email.dirty\">Required</em>\r\n      <input formControlName=\"email\" id=\"email\" type=\"text\" placeholder=\"Email...\" />\r\n    </div>\r\n    <div class=\"form-group\" [ngClass]=\"{ 'error' : password.invalid && password.dirty }\">\r\n      <label for=\"password\">Password:</label>\r\n      <em *ngIf=\"password.invalid && password.dirty\">Required</em>\r\n      <input formControlName=\"password\" id=\"password\" type=\"password\" placeholder=\"Password...\" />\r\n    </div>\r\n    <div class=\"form-group\" >\r\n      <button type=\"button\" (click)=\"cancel()\" *ngIf=\"!saving\">Cancel</button>\r\n      <button class=\"save\" type=\"submit\" *ngIf=\"!saving\" [disabled]=\"registerForm.invalid\">Save</button>\r\n      <wb-loading-spinner [loading]=\"saving\"></wb-loading-spinner>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router'\n\nimport { UserRepositoryService } from '../core/user-repository.service'\nimport { IUser } from './user.model';\n\n@Component({\n  styleUrls: ['./register.component.css'],\n  templateUrl: './register.component.html'\n})\n\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  firstName: FormControl;\n  lastName: FormControl;\n  email: FormControl;\n  password: FormControl;\n  saving:boolean=false;\n\n  constructor(private router: Router, private userRepository: UserRepositoryService) {\n    this.firstName = new FormControl('', Validators.required);\n    this.lastName = new FormControl('', Validators.required);\n    this.email = new FormControl('', Validators.required);\n    this.password = new FormControl('', Validators.required);\n\n    this.registerForm = new FormGroup({\n      firstName: this.firstName,\n      lastName: this.lastName,\n      email: this.email,\n      password: this.password\n    });\n  }\n\n  registerUser(user:IUser) {\n    this.saving=true;\n    this.saveAndRedirect(user);\n  }\n  cancel() {\n    this.router.navigate(['/']);\n  }\n  \n  private saveAndRedirect(user: IUser) {\n    this.userRepository.saveUser(user)\n      .subscribe(\n        null,\n        ()=>this.saving=false,\n        () => this.router.navigate(['/catalog']));\n  }\n\n}\n","<div>\n  <h2 class=\"header\">Sign In</h2>\n  <form #signInForm=\"ngForm\" (ngSubmit)=\"signIn(signInForm.value)\" autocomplete=\"off\" novalidate>\n    <div class=\"form-group\" [ngClass]=\"{ 'error' : signInForm.controls.email?.invalid && signInForm.controls.email?.dirty }\">\n      <label for=\"email\">Email:</label>\n      <em *ngIf=\"signInForm.controls.email?.invalid && signInForm.controls.email?.dirty\">Required</em>\n      <input [(ngModel)]=\"credentials.email\" required name=\"email\" id=\"email\" type=\"text\" placeholder=\"Email...\" />\n    </div>\n    <div class=\"form-group\" [ngClass]=\"{ 'error' : signInForm.controls.password?.invalid && signInForm.controls.password?.dirty }\">\n      <label for=\"password\">Password:</label>\n      <em *ngIf=\"signInForm.controls.password?.invalid && signInForm.controls.password?.dirty\">Required</em>\n      <input [(ngModel)]=\"credentials.password\" required name=\"password\" id=\"password\" type=\"password\" placeholder=\"Password...\" />\n    </div>\n    <div class=\"form-group buttons\" >\n      <button type=\"button\" (click)=\"cancel()\">Cancel</button>\n      <button class=\"save\" type=\"submit\" [disabled]=\"signInForm.invalid\">Sign In</button>\n    </div>\n  </form>\n</div>\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router'\r\nimport { UserRepositoryService } from '../core/user-repository.service'\r\n\r\n@Component({\r\n  styleUrls: ['./sing-in.component.css'],\r\n  templateUrl: './sign-in.component.html'\r\n})\r\nexport class SignInComponent {\r\n  credentials:any = {};\r\n\r\n  constructor(private router:Router, private userRepository:UserRepositoryService) { }\r\n\r\n  signIn(credentials:any) {\r\n    this.userRepository.signIn(credentials)\r\n      .subscribe(\r\n        null,\r\n        (err) => {console.error(err, 'Error')},\r\n        () => this.router.navigate(['/catalog'])\r\n      )\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['/'])\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { RegisterComponent } from './register.component';\nimport { SignInComponent } from './sign-in.component';\n\n@NgModule({\n  imports: [\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule,\n    RouterModule.forChild([\n      { path: 'register', component: RegisterComponent, },\n      { path: 'sign-in', component: SignInComponent, },\n    ])\n  ],\n  exports: [],\n  declarations: [RegisterComponent, SignInComponent],\n  providers: []\n})\nexport class UsersModule { };\n"]}